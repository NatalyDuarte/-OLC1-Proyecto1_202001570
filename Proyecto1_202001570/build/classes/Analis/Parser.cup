// ------------  Paquete e importaciones ------------
package Analis;

import java_cup.runtime.*;
import java.util.LinkedList;
import Principal.*;
import func.*;

//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
        TError nuevoError = new TError("Error Sintactico", s.value.toString(),s.right,s.left);
        Principal.Lista_Errores.add(nuevoError);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
        TError nuevoError = new TError("Error Sintactico", s.value.toString(),s.right,s.left);
        Principal.Lista_Errores.add(nuevoError);
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String ENTERO;
terminal String POR, MAS,MENOS,DIVISION;
terminal String PARENTESIS_A, PARENTESIS_C, LLAVE_A, LLAVE_C,IGUAL;
terminal String MOSTRAR, IF,ELSE,FOR,WHILE;
terminal String PUNTOYCOMA,COMA;
terminal String IDENTI,INT,DOUBLE,CHAR,BOOL,STRING;
terminal String DOUBLEN,TRUE,FALSE,CADENA;
terminal String COMENLI,COMENMULTILI;
terminal String VOID, MAIN;
terminal String MAYOR,MENOR,MAYORIGUAL,MENORIGUAL,IGUALIGUAL,CERO;
terminal String AND, OR, NOT,DO;
terminal String SWITCH,CASE,BREAK,DOSPUNTOS,DEFAULT;
terminal String DEFIGLO,DOLAR,NEWVALOR,GRAFIB;
terminal String TITULO,TITULOX,TITULOY,EJEX,EJEY,GRAFIP; 
terminal String CORCHETE,VALORES; 

//------> Declaración de no terminales
non terminal inicio;
non terminal LinkedList lista_instr;
non terminal instruccion;
non terminal expresion, expresionf;
non terminal instr_mostrar, if,else,for,while,declara,declaraig,comentarios,comentariosl;
non terminal declaradou ,declaraigdou;
non terminal declaracha ,declaraigcha;
non terminal declarabol ,declaraigbol;
non terminal declaracade ,declaraigcade,declararfas;
non terminal grafibarras, stringb,maind,do,funcion,declaraigdounew;
non terminal ejex,stringtitux,stringtituy,grafipie;
non terminal switch,case,break,default;
non terminal expres,valores;

// ------> Precedencia
precedence left MAS;
precedence left POR;
precedence left MENOS;
precedence left DIVISION;
precedence left MAYOR, MENOR, MAYORIGUAL, MENORIGUAL, IGUALIGUAL;
precedence left AND, OR;
precedence right NOT;

//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------

inicio ::= lista_instr:lista {: func.Funcion.traduccion = lista; :}
;



lista_instr ::= lista_instr:lista instruccion:val
        {: 
            lista.addAll((LinkedList) val);
            RESULT = (LinkedList) lista;
        :}

    | instruccion:val
        {: 
            LinkedList<String> lista = new LinkedList<>();
            lista.addAll((LinkedList) val);
            RESULT = (LinkedList) lista;
        :}
;



instruccion ::= instr_mostrar:val {: RESULT = val; :}
    | if:val    {: RESULT = val; :}
    | declara:val  {: RESULT = val; :}
    | declaraig:val  {: RESULT = val; :}
    | declaradou:val  {: RESULT = val; :}
    | declaraigdou:val  {: RESULT = val; :}
    | declaracha:val  {: RESULT = val; :}
    | declaraigcha:val  {: RESULT = val; :}
    | declarabol:val  {: RESULT = val; :}
    | declaraigbol:val  {: RESULT = val; :}
    | declaracade:val  {: RESULT = val; :}
    | declaraigcade:val  {: RESULT = val; :}
    | comentarios:val  {: RESULT = val; :}
    | comentariosl:val  {: RESULT = val; :}
    | maind:val  {: RESULT = val; :}
    | else:val    {: RESULT = val; :}
    | while:val    {: RESULT = val; :}
    | for:val    {: RESULT = val; :}
    | declararfas:val  {: RESULT = val; :}
    | do:val  {: RESULT = val; :}
    | funcion:val {: RESULT = val; :}
    | declaraigdounew:val {: RESULT = val; :}
    | grafibarras:val {: RESULT = val; :}
    | stringb:val {: RESULT = val; :}
    | ejex:val {: RESULT = val; :}
    | stringtitux:val  {: RESULT = val; :}
    | stringtituy:val  {: RESULT = val; :}
    | grafipie:val {: RESULT = val; :}
    | switch:val {: RESULT = val; :}
    | case:val {: RESULT = val; :}
    | break:val {: RESULT = val; :}
    | default:val {: RESULT = val; :}
    | expres:val {: RESULT = val; :}
    | valores:val {: RESULT = val; :}
;
valores ::= DOUBLE CORCHETE VALORES IGUAL LLAVE_A lista_instr:inst LLAVE_C PUNTOYCOMA 
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("double [] Valores = {"); 
                lista.addAll(inst);
                Graficar.valoress.addAll(inst);
                lista.add("};\n"); 
                RESULT = lista;
            :}
;
expres::= CADENA:val COMA
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(val.toString()+", "); 
                RESULT = lista;
            :}
    | CADENA:val
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(val.toString()+" "); 
                RESULT = lista;
            :}
    | IDENTI:val COMA
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(val.toString()+", "); 
                RESULT = lista;
            :}
    | IDENTI:val
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(val.toString()+" "); 
                RESULT = lista;
            :}
    |DOUBLEN:val COMA
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(val.toString()+", "); 
                RESULT = lista;
            :}
    | DOUBLEN:val
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(val.toString()+" "); 
                RESULT = lista;
            :}
    | DOLAR LLAVE_A NEWVALOR COMA expresion:cade COMA expresion:cades LLAVE_C COMA
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("${NewValor, "+cade+", "+cades+" },"); 
                RESULT = lista;
            :}
    | DOLAR LLAVE_A NEWVALOR COMA expresion:cade COMA expresion:cades LLAVE_C
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("${NewValor, "+cade+", "+cades+" }"); 
                RESULT = lista;
            :}
;
ejex ::= STRING CORCHETE EJEX IGUAL LLAVE_A lista_instr:inst LLAVE_C PUNTOYCOMA 
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("String [] ejex = {"); 
                lista.addAll(inst); 
                lista.add("};\n");
                Graficar.ejexs.addAll(inst);
                RESULT = lista;
            :}
;
default ::= DEFAULT DOSPUNTOS
        {:
        LinkedList<String> lista = new LinkedList<>();
        lista.add(" :");

        RESULT = lista;
    :}
;
break ::= BREAK PUNTOYCOMA
        {:
        LinkedList<String> lista = new LinkedList<>();
        lista.add("\n");

        RESULT = lista;
    :}
;

case ::= CASE expresion:cades DOSPUNTOS
        {:
        LinkedList<String> lista = new LinkedList<>();
        lista.add(cades+ " :");

        RESULT = lista;
    :}
;

switch ::= SWITCH PARENTESIS_A expresion:exp PARENTESIS_C LLAVE_A lista_instr:inst LLAVE_C 
    {:
        LinkedList<String> lista = new LinkedList<>();
        lista.add("def switch (case, "+ exp + "):\n");
        lista.add("switcher = {\n");

        func.Funcion.contador++;
        lista.addAll(func.Funcion.tabulaciones(inst));
        func.Funcion.contador--;
        
        lista.add("}\n");

        RESULT = lista;
    :}
;

grafibarras ::= VOID GRAFIB PARENTESIS_A PARENTESIS_C LLAVE_A lista_instr:inst LLAVE_C 
    {: 
    LinkedList<String> lista = new LinkedList<>();
    lista.add("void GraficaBarras(){\n");
    lista.addAll(inst);
    lista.add("\n");
    lista.add("}\n");
    func.Funcion.funciones.addAll(inst);
    RESULT = lista;
    :}
;

grafipie ::= VOID GRAFIP PARENTESIS_A PARENTESIS_C LLAVE_A lista_instr:inst LLAVE_C 
    {: 
    LinkedList<String> lista = new LinkedList<>();
    lista.add("void GraficaPie(){\n");
    lista.addAll(inst);
    lista.add("\n");
    lista.add("}\n");
    func.Funcion.funciones.addAll(inst);
    RESULT = lista;
    :}
;

stringb ::= STRING TITULO IGUAL expresion:cades PUNTOYCOMA 
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("string titulo = "+cades.toString()+";\n");
                Graficar.Titulo = cades.toString();
                RESULT = lista;
            :}
;
stringtitux ::= STRING TITULOX IGUAL expresion:cades PUNTOYCOMA 
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("string titulox = "+cades.toString()+";\n"); 
                Graficar.TituloX = cades.toString();
                RESULT = lista;
            :}
;
stringtituy ::= STRING TITULOY IGUAL expresion:cades PUNTOYCOMA 
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("string tituloy = "+cades.toString()+";\n");
                Graficar.TituloY = cades.toString();
                RESULT = lista;
            :}
;


funcion ::= VOID DEFIGLO PARENTESIS_A PARENTESIS_C LLAVE_A lista_instr:inst LLAVE_C 
    {: 
    LinkedList<String> lista = new LinkedList<>();
    lista.add("void DefinirGlobales(){\n");
    lista.addAll(inst);
    lista.add("\n");
    lista.add("}\n");
    func.Funcion.funciones.addAll(inst);
    func.Graficar.funciones.addAll(inst); 
    RESULT = lista;
    :}
;

declaraigdounew ::= DOUBLE expresion:val IGUAL DOLAR LLAVE_A NEWVALOR COMA expresion:cade COMA expresion:cades LLAVE_C PUNTOYCOMA 
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("double "+val.toString()+" = ${ NewValor, "+cade.toString()+","+cades.toString()+" };\n"); 
                Graficar instancia = new Graficar();
                instancia.AgregarDo(val.toString(),"${ NewValor, "+cade.toString()+","+cades.toString()+" }");
                RESULT = lista;
            :}
;


maind ::= VOID MAIN PARENTESIS_A PARENTESIS_C LLAVE_A lista_instr:inst LLAVE_C 
    {:
        LinkedList<String> lista = new LinkedList<>();
        lista.add("def main():\n");

        func.Funcion.contador++;
        lista.addAll(func.Funcion.tabulaciones(inst));
        func.Funcion.contador--;

        lista.add("if__name__ = \"__main__\":\n");
        lista.add("\tmain()\n");

        RESULT = lista;
    :}
;

comentarios ::= COMENMULTILI:val  
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("comentario multilenea: "+val+"\n"); 
                RESULT = lista;
            :}
;
comentariosl ::= COMENLI:val  
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("comentario una linea: "+val+"\n"); 
                RESULT = lista;
            :}
;



if ::= IF PARENTESIS_A expresion:exp PARENTESIS_C LLAVE_A lista_instr:inst LLAVE_C 
    {:
        LinkedList<String> lista = new LinkedList<>();
        lista.add("if "+ exp + ":\n");

        func.Funcion.contador++;
        lista.addAll(func.Funcion.tabulaciones(inst));
        func.Funcion.contador--;

        RESULT = lista;
    :}
;

while ::= WHILE PARENTESIS_A expresion:exp PARENTESIS_C LLAVE_A lista_instr:inst LLAVE_C 
    {:
        LinkedList<String> lista = new LinkedList<>();
        lista.add("while "+ exp + ":\n");

        func.Funcion.contador++;
        lista.addAll(func.Funcion.tabulaciones(inst));
        func.Funcion.contador--;

        RESULT = lista;
    :}
;

do ::= INT expresion:val IGUAL expresion:ent PUNTOYCOMA DO LLAVE_A lista_instr:inst LLAVE_C WHILE PARENTESIS_A expresion:exp PARENTESIS_C PUNTOYCOMA 
    {:
        LinkedList<String> lista = new LinkedList<>();
        lista.add(val+" = "+ ent + "\n");
        lista.add("while True:\n");

        LinkedList<String> listas = new LinkedList<>();
        listas.add(val+" = "+val+"+1\n");
        listas.add("if ("+exp+"):\n");
        listas.add("\tbreak\n");

        func.Funcion.contador++;
        lista.addAll(func.Funcion.tabulaciones(inst));
        lista.addAll(func.Funcion.tabulaciones(listas));
        func.Funcion.contador--;

        RESULT = lista;
    :}
;

else ::= ELSE IF PARENTESIS_A expresion:exp PARENTESIS_C LLAVE_A lista_instr:inst LLAVE_C 
    {:
        LinkedList<String> lista = new LinkedList<>();
        lista.add("elif "+ exp + ":\n");

        func.Funcion.contador++;
        lista.addAll(func.Funcion.tabulaciones(inst));
        func.Funcion.contador--;

        RESULT = lista;
    :}
;

instr_mostrar ::= MOSTRAR PARENTESIS_A expresion:val PARENTESIS_C PUNTOYCOMA   
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("print("+val+")\n"); 
                RESULT = lista;
            :}
;
declara ::= INT expresion:val PUNTOYCOMA     
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("var "+val+"\n"); 
                RESULT = lista;
            :}
;
declararfas ::= expresion:exp IGUAL expresion:val PUNTOYCOMA   
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(exp+"="+val+"\n"); 
                RESULT = lista;
            :}
;
declaraig ::= INT expresion:exp IGUAL expresion:val PUNTOYCOMA   
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(exp+"="+val+"\n"); 
                RESULT = lista;
            :}
;
declaradou ::= DOUBLE expresion:val PUNTOYCOMA     
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("var "+val+"\n"); 
                RESULT = lista;
            :}
;
declaraigdou ::= DOUBLE expresion:exp IGUAL expresion:val PUNTOYCOMA   
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(exp+"="+val+"\n"); 
                Graficar instancia = new Graficar();
                instancia.AgregarD(exp.toString(),val.toString());
                RESULT = lista;
            :}
;

declaracha ::= CHAR expresion:val PUNTOYCOMA     
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("var "+val+"\n"); 
                RESULT = lista;
            :}
;
declaraigcha ::= CHAR expresion:exp IGUAL expresion:val PUNTOYCOMA   
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(exp+"="+val+"\n"); 
                RESULT = lista;
            :}
;
declarabol ::= BOOL expresion:val PUNTOYCOMA     
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("var "+val+"\n"); 
                RESULT = lista;
            :}
;
declaraigbol ::= BOOL expresion:exp IGUAL expresion:val PUNTOYCOMA   
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(exp+"="+val+"\n"); 
                RESULT = lista;
            :}
;
declaracade ::= STRING expresion:val PUNTOYCOMA     
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("var "+val+"\n"); 
                RESULT = lista;
            :}
;
declaraigcade ::= STRING expresion:exp IGUAL expresion:val PUNTOYCOMA   
            {: 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(exp+"="+val+"\n"); 
                Graficar instancia = new Graficar();
                instancia.AgregarS(exp.toString(),val.toString());
                RESULT = lista;
            :}
;

expresion ::= expresion:a POR expresion:b  {: RESULT = a.toString()+" * "+b.toString() ; :}
    | expresion:a MAS expresion:b          {: RESULT = a.toString()+" + "+b.toString() ; :}
    | expresion:a MENOS expresion:b        {: RESULT = a.toString()+" - "+b.toString() ; :}
    | expresion:a DIVISION expresion:b     {: RESULT = a.toString()+" / "+b.toString() ; :}
    | expresion:a MAYOR expresion:b        {: RESULT = a.toString()+" > "+b.toString() ; :}
    | expresion:a MENOR expresion:b        {: RESULT = a.toString()+" < "+b.toString() ; :}
    | expresion:a MAYORIGUAL expresion:b   {: RESULT = a.toString()+" >= "+b.toString() ; :}
    | expresion:a MENORIGUAL expresion:b   {: RESULT = a.toString()+" <= "+b.toString() ; :}
    | expresion:a IGUALIGUAL expresion:b   {: RESULT = a.toString()+" == "+b.toString() ; :}
    | expresion:a NOT IGUAL expresion:b    {: RESULT = a.toString()+" != "+b.toString() ; :}
    | expresion:a AND expresion:b          {: RESULT = a.toString()+" and "+b.toString() ; :}
    | expresion:a OR expresion:b           {: RESULT = a.toString()+" or "+b.toString() ; :}
    | expresion:a NOT expresion:b          {: RESULT = a.toString()+" not "+b.toString() ; :}
    | CADENA:a MAS expresion:b             {: RESULT = a.toString()+","+b.toString() ; :}
    | ENTERO:val                           {: RESULT = val; :}
    | IDENTI:val                           {: RESULT = val; :}
    | DOUBLEN:val                          {: RESULT = val; :}
    | TRUE:val                             {: RESULT = val; :}
    | FALSE:val                            {: RESULT = val; :}
    | CADENA:val                           {: RESULT = val; :}
;


for ::= FOR PARENTESIS_A INT expresionf:exz expresionf:exp PUNTOYCOMA expresion MAS MAS PARENTESIS_C LLAVE_A lista_instr:inst LLAVE_C 
    {:
        LinkedList<String> lista = new LinkedList<>();
        lista.add("for "+exz+" in range("+ exp +"):\n");

        func.Funcion.contador++;
        lista.addAll(func.Funcion.tabulaciones(inst));
        func.Funcion.contador--;

        RESULT = lista;
    :}
;

expresionf ::= IGUAL CERO:a PUNTOYCOMA expresionf:b       {: RESULT = 1+","+b.toString() ; :}
    | IGUAL expresionf:a PUNTOYCOMA expresionf:b          {: RESULT = a.toString()+","+b.toString() ; :}
    | INT expresionf:exp IGUAL expresionf:val             {: RESULT = val; :}
    | ENTERO:val                                          {: RESULT = val; :}
    | IDENTI:val                                          {: RESULT = val; :}
    | expresionf:a MENOR expresionf:b                     {: RESULT =b.toString(); :}
    | expresionf:a MENORIGUAL expresionf:b                {: RESULT =b.toString(); :}

;



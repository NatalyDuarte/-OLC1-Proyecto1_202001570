    
// ------------  Paquete e importaciones ------------
package AnalisJson;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.HashMap;
import Principal.*;

//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public static String resultado = ""; 
    public static HashMap<String, String> listaVariables = new HashMap<>();
    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
        TError nuevoError = new TError("Error Sintactico", s.value.toString(),s.right,s.left);
        Principal.Lista_Errores.add(nuevoError);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
        TError nuevoError = new TError("Error Sintactico", s.value.toString(),s.right,s.left);
        Principal.Lista_Errores.add(nuevoError);
    }

:}





//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String CADENA;
terminal String CADEN;
terminal String COMA;
terminal String DOUBLEN;
terminal String LLAVE_A;
terminal String LLAVE_C;
terminal String DOSPUNTOS;
terminal String COMENLI;
terminal String COMENMULTILI,NOMBREAR;

//------> Declaración de no terminales
non terminal inicio;
non terminal asignacion;
non terminal lista_instr;
non terminal instruccion;
non terminal expresion;
non terminal instrucjson;
non terminal instrucg;

//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------

inicio ::= lista_instr
;

lista_instr ::= lista_instr instruccion
    | instruccion
;

instruccion ::=  LLAVE_A instrucjson LLAVE_C
    | COMENMULTILI
    | COMENLI
;

instrucjson ::= instrucjson COMA asignacion 
    | asignacion
;

asignacion ::= CADENA:nombre DOSPUNTOS expresion:var  
        {:listaVariables.put(nombre.toString(), var.toString()); :}
;

expresion ::=  DOUBLEN:val                     {: RESULT = val; :}
    | CADEN:val                                {: RESULT = val; :}
    | CADENA:val                               {: RESULT = val; :}
;


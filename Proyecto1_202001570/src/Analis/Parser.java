
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analis;

import java_cup.runtime.*;
import java.util.LinkedList;
import Principal.*;
import func.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\050\012\000\002\047\004\000\002\047\003\000\002\047" +
    "\004\000\002\047\003\000\002\047\004\000\002\047\003" +
    "\000\002\047\013\000\002\047\012\000\002\037\012\000" +
    "\002\046\004\000\002\045\004\000\002\044\005\000\002" +
    "\043\011\000\002\031\011\000\002\042\011\000\002\032" +
    "\007\000\002\040\007\000\002\041\007\000\002\035\011" +
    "\000\002\036\016\000\002\033\011\000\002\016\003\000" +
    "\002\017\003\000\002\010\011\000\002\013\011\000\002" +
    "\034\020\000\002\011\012\000\002\007\007\000\002\014" +
    "\005\000\002\030\006\000\002\015\007\000\002\020\005" +
    "\000\002\021\007\000\002\022\005\000\002\023\007\000" +
    "\002\024\005\000\002\025\007\000\002\026\005\000\002" +
    "\027\007\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\006\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\012\017\000\002\006\006\000" +
    "\002\006\006\000\002\006\006\000\002\006\003\000\002" +
    "\006\003\000\002\006\005\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\062\004\013\016\012\017\035\020\060\021" +
    "\023\022\062\025\020\026\022\027\017\030\011\031\031" +
    "\032\071\033\053\034\041\035\074\036\043\037\045\040" +
    "\066\041\051\055\054\056\015\057\047\061\063\063\076" +
    "\001\002\000\066\002\uffdc\004\uffdc\014\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\061\uffdc\063\uffdc\001\002\000\066\002\uffe3\004\uffe3\014" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\055\uffe3" +
    "\056\uffe3\057\uffe3\061\uffe3\063\uffe3\001\002\000\066\002" +
    "\uffe4\004\uffe4\014\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\055\uffe4\056\uffe4\057\uffe4\061\uffe4\063\uffe4\001" +
    "\002\000\066\002\uffe1\004\uffe1\014\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\055\uffe1\056\uffe1\057\uffe1\061" +
    "\uffe1\063\uffe1\001\002\000\066\002\ufff7\004\ufff7\014\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\061\ufff7\063\ufff7\001\002\000\016\004\013" +
    "\025\105\033\106\034\041\035\074\036\107\001\002\000" +
    "\004\011\u0103\001\002\000\046\005\uffa5\006\uffa5\007\uffa5" +
    "\010\uffa5\012\uffa5\014\uffa5\015\uffa5\023\uffa5\024\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\060\uffa5\001\002\000\066\002\ufffb\004\ufffb\014" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\055\ufffb" +
    "\056\ufffb\057\ufffb\061\ufffb\063\ufffb\001\002\000\016\004" +
    "\013\025\105\033\106\034\041\035\074\036\107\001\002" +
    "\000\066\002\ufffa\004\ufffa\014\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa" +
    "\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\040\ufffa\041\ufffa\055\ufffa\056\ufffa\057\ufffa\061\ufffa" +
    "\063\ufffa\001\002\000\020\004\013\025\105\033\106\034" +
    "\041\035\074\036\107\074\354\001\002\000\122\002\uffd7" +
    "\004\uffd7\005\uffa4\006\uffa4\007\uffa4\010\uffa4\014\uffd7\015" +
    "\uffa4\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\024\353" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\055\uffd7\056\uffd7\057\uffd7\061\uffd7\063\uffd7" +
    "\001\002\000\066\002\uffea\004\uffea\014\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\055\uffea\056\uffea\057\uffea" +
    "\061\uffea\063\uffea\001\002\000\016\004\013\025\105\033" +
    "\106\034\041\035\074\036\107\001\002\000\004\011\300" +
    "\001\002\000\066\002\uffde\004\uffde\014\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\055\uffde\056\uffde\057\uffde" +
    "\061\uffde\063\uffde\001\002\000\004\002\277\001\002\000" +
    "\066\002\uffe2\004\uffe2\014\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\055\uffe2\056\uffe2\057\uffe2\061\uffe2\063" +
    "\uffe2\001\002\000\066\002\ufff4\004\ufff4\014\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\041\ufff4\055\ufff4\056\ufff4\057" +
    "\ufff4\061\ufff4\063\ufff4\001\002\000\064\002\000\004\013" +
    "\016\012\017\035\020\060\021\023\022\062\025\020\026" +
    "\022\027\017\030\011\031\031\032\071\033\053\034\041" +
    "\035\074\036\043\037\045\040\066\041\051\055\054\056" +
    "\015\057\047\061\063\063\076\001\002\000\016\004\013" +
    "\025\105\033\106\034\041\035\074\036\107\001\002\000" +
    "\066\002\uffee\004\uffee\014\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\040\uffee\041\uffee\055\uffee\056\uffee\057\uffee\061\uffee\063" +
    "\uffee\001\002\000\066\002\ufff2\004\ufff2\014\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\022\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2" +
    "\036\ufff2\037\ufff2\040\ufff2\041\ufff2\055\ufff2\056\ufff2\057" +
    "\ufff2\061\ufff2\063\ufff2\001\002\000\066\002\ufff1\004\ufff1" +
    "\014\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\055" +
    "\ufff1\056\ufff1\057\ufff1\061\ufff1\063\ufff1\001\002\000\004" +
    "\011\264\001\002\000\066\002\ufffe\004\ufffe\014\ufffe\016" +
    "\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\025\ufffe\026\ufffe" +
    "\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035" +
    "\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\055\ufffe\056\ufffe" +
    "\057\ufffe\061\ufffe\063\ufffe\001\002\000\066\002\ufff9\004" +
    "\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\055\ufff9\056\ufff9\057\ufff9\061\ufff9\063\ufff9\001\002\000" +
    "\066\002\uffdf\004\uffdf\014\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\055\uffdf\056\uffdf\057\uffdf\061\uffdf\063" +
    "\uffdf\001\002\000\046\005\uffa2\006\uffa2\007\uffa2\010\uffa2" +
    "\012\uffa2\014\uffa2\015\uffa2\023\uffa2\024\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\047\uffa2\051\uffa2\052\uffa2\053\uffa2" +
    "\060\uffa2\001\002\000\066\002\ufff3\004\ufff3\014\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\055\ufff3\056\ufff3" +
    "\057\ufff3\061\ufff3\063\ufff3\001\002\000\122\002\uffd9\004" +
    "\uffd9\005\uffa0\006\147\007\uffa0\010\uffa0\014\uffd9\015\uffa0" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\024\263\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\043" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\055\uffd9\056\uffd9\057\uffd9\061\uffd9\063\uffd9\001" +
    "\002\000\066\002\uffe8\004\uffe8\014\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\055\uffe8\056\uffe8\057\uffe8\061" +
    "\uffe8\063\uffe8\001\002\000\066\002\uffc4\004\uffc4\014\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\055\uffc4\056" +
    "\uffc4\057\uffc4\061\uffc4\063\uffc4\001\002\000\034\005\116" +
    "\006\120\007\114\010\123\015\260\043\121\044\115\045" +
    "\117\046\112\047\122\051\111\052\125\053\124\001\002" +
    "\000\004\023\257\001\002\000\066\002\ufff6\004\ufff6\014" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\055\ufff6" +
    "\056\ufff6\057\ufff6\061\ufff6\063\ufff6\001\002\000\012\042" +
    "\232\062\231\065\230\073\227\001\002\000\066\002\uffe9" +
    "\004\uffe9\014\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\055\uffe9\056\uffe9\057\uffe9\061\uffe9\063\uffe9\001\002" +
    "\000\122\002\uffd5\004\uffd5\005\uffa3\006\uffa3\007\uffa3\010" +
    "\uffa3\014\uffd5\015\uffa3\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\024\226\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\051\uffa3\052\uffa3\053\uffa3\055\uffd5\056\uffd5\057\uffd5" +
    "\061\uffd5\063\uffd5\001\002\000\004\011\220\001\002\000" +
    "\066\002\ufffc\004\ufffc\014\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc" +
    "\040\ufffc\041\ufffc\055\ufffc\056\ufffc\057\ufffc\061\ufffc\063" +
    "\ufffc\001\002\000\066\002\uffed\004\uffed\014\uffed\016\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\055\uffed\056\uffed\057" +
    "\uffed\061\uffed\063\uffed\001\002\000\066\002\uffe6\004\uffe6" +
    "\014\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\061\uffe6\063\uffe6\001\002\000\004" +
    "\017\211\001\002\000\066\002\uffec\004\uffec\014\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\036\uffec\037\uffec\040\uffec\041\uffec\055\uffec\056\uffec" +
    "\057\uffec\061\uffec\063\uffec\001\002\000\004\011\203\001" +
    "\002\000\004\060\202\001\002\000\066\002\ufff5\004\ufff5" +
    "\014\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\061\ufff5\063\ufff5\001\002\000\066" +
    "\002\ufff0\004\ufff0\014\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\041\ufff0\055\ufff0\056\ufff0\057\ufff0\061\ufff0\063\ufff0" +
    "\001\002\000\066\002\uffc5\004\uffc5\014\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\055\uffc5\056\uffc5\057\uffc5" +
    "\061\uffc5\063\uffc5\001\002\000\066\002\uffe0\004\uffe0\014" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\061\uffe0\063\uffe0\001\002\000\066\002" +
    "\ufffd\004\ufffd\014\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd" +
    "\022\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd" +
    "\041\ufffd\055\ufffd\056\ufffd\057\ufffd\061\ufffd\063\ufffd\001" +
    "\002\000\026\004\013\025\105\033\106\034\041\035\074" +
    "\036\107\066\151\067\155\070\153\074\152\001\002\000" +
    "\066\002\uffef\004\uffef\014\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\055\uffef\056\uffef\057\uffef\061\uffef\063" +
    "\uffef\001\002\000\066\002\uffdd\004\uffdd\014\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\061\uffdd\063\uffdd\001\002\000\046\005\uffa1\006\uffa1" +
    "\007\uffa1\010\uffa1\012\uffa1\014\uffa1\015\uffa1\023\uffa1\024" +
    "\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\060\uffa1\001\002\000\066\002\uffeb\004" +
    "\uffeb\014\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb" +
    "\055\uffeb\056\uffeb\057\uffeb\061\uffeb\063\uffeb\001\002\000" +
    "\004\013\102\001\002\000\066\002\uffe5\004\uffe5\014\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\061\uffe5\063\uffe5\001\002\000\066\002\uffe7" +
    "\004\uffe7\014\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\061\uffe7\063\uffe7\001\002" +
    "\000\066\002\ufff8\004\ufff8\014\ufff8\016\ufff8\017\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\055\ufff8\056\ufff8\057\ufff8\061\ufff8" +
    "\063\ufff8\001\002\000\004\064\103\001\002\000\004\024" +
    "\104\001\002\000\016\004\013\025\105\033\106\034\041" +
    "\035\074\036\107\001\002\000\046\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\012\uffa4\014\uffa4\015\uffa4\023\uffa4\024\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\060\uffa4\001\002\000\046\005\uffa3\006\uffa3" +
    "\007\uffa3\010\uffa3\012\uffa3\014\uffa3\015\uffa3\023\uffa3\024" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\060\uffa3\001\002\000\046\005\uffa0\006" +
    "\147\007\uffa0\010\uffa0\012\uffa0\014\uffa0\015\uffa0\023\uffa0" +
    "\024\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\051" +
    "\uffa0\052\uffa0\053\uffa0\060\uffa0\001\002\000\034\005\116" +
    "\006\120\007\114\010\123\024\113\043\121\044\115\045" +
    "\117\046\112\047\122\051\111\052\125\053\124\001\002" +
    "\000\016\004\013\025\105\033\106\034\041\035\074\036" +
    "\107\001\002\000\016\004\013\025\105\033\106\034\041" +
    "\035\074\036\107\001\002\000\016\004\013\025\105\033" +
    "\106\034\041\035\074\036\107\001\002\000\016\004\013" +
    "\025\105\033\106\034\041\035\074\036\107\001\002\000" +
    "\016\004\013\025\105\033\106\034\041\035\074\036\107" +
    "\001\002\000\016\004\013\025\105\033\106\034\041\035" +
    "\074\036\107\001\002\000\016\004\013\025\105\033\106" +
    "\034\041\035\074\036\107\001\002\000\016\004\013\025" +
    "\105\033\106\034\041\035\074\036\107\001\002\000\016" +
    "\004\013\025\105\033\106\034\041\035\074\036\107\001" +
    "\002\000\016\004\013\025\105\033\106\034\041\035\074" +
    "\036\107\001\002\000\016\004\013\025\105\033\106\034" +
    "\041\035\074\036\107\001\002\000\020\004\013\015\127" +
    "\025\105\033\106\034\041\035\074\036\107\001\002\000" +
    "\016\004\013\025\105\033\106\034\041\035\074\036\107" +
    "\001\002\000\046\005\uffa8\006\uffa8\007\uffa8\010\uffa8\012" +
    "\uffa8\014\uffa8\015\uffa8\023\uffa8\024\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\051\uffa8\052\uffa8\053\124\060" +
    "\uffa8\001\002\000\016\004\013\025\105\033\106\034\041" +
    "\035\074\036\107\001\002\000\046\005\uffa7\006\uffa7\007" +
    "\uffa7\010\uffa7\012\uffa7\014\uffa7\015\uffa7\023\uffa7\024\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\051\uffa7\052" +
    "\uffa7\053\124\060\uffa7\001\002\000\046\005\116\006\120" +
    "\007\114\010\123\012\uffaa\014\uffaa\015\uffaa\023\uffaa\024" +
    "\uffaa\043\121\044\115\045\117\046\112\047\122\051\111" +
    "\052\125\053\124\060\uffaa\001\002\000\046\005\uffb0\006" +
    "\uffb0\007\uffb0\010\uffb0\012\uffb0\014\uffb0\015\uffb0\023\uffb0" +
    "\024\uffb0\043\121\044\115\045\117\046\112\047\122\051" +
    "\111\052\125\053\124\060\uffb0\001\002\000\046\005\uffab" +
    "\006\uffab\007\uffab\010\uffab\012\uffab\014\uffab\015\uffab\023" +
    "\uffab\024\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab" +
    "\051\111\052\125\053\124\060\uffab\001\002\000\046\005" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\012\uffaf\014\uffaf\015\uffaf" +
    "\023\uffaf\024\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047" +
    "\uffaf\051\111\052\125\053\124\060\uffaf\001\002\000\046" +
    "\005\116\006\uffb2\007\114\010\123\012\uffb2\014\uffb2\015" +
    "\uffb2\023\uffb2\024\uffb2\043\121\044\115\045\117\046\112" +
    "\047\122\051\111\052\125\053\124\060\uffb2\001\002\000" +
    "\046\005\uffad\006\uffad\007\uffad\010\uffad\012\uffad\014\uffad" +
    "\015\uffad\023\uffad\024\uffad\043\uffad\044\uffad\045\uffad\046" +
    "\uffad\047\uffad\051\111\052\125\053\124\060\uffad\001\002" +
    "\000\046\005\uffb3\006\uffb3\007\114\010\123\012\uffb3\014" +
    "\uffb3\015\uffb3\023\uffb3\024\uffb3\043\121\044\115\045\117" +
    "\046\112\047\122\051\111\052\125\053\124\060\uffb3\001" +
    "\002\000\046\005\uffae\006\uffae\007\uffae\010\uffae\012\uffae" +
    "\014\uffae\015\uffae\023\uffae\024\uffae\043\uffae\044\uffae\045" +
    "\uffae\046\uffae\047\uffae\051\111\052\125\053\124\060\uffae" +
    "\001\002\000\046\005\uffb1\006\uffb1\007\uffb1\010\123\012" +
    "\uffb1\014\uffb1\015\uffb1\023\uffb1\024\uffb1\043\121\044\115" +
    "\045\117\046\112\047\122\051\111\052\125\053\124\060" +
    "\uffb1\001\002\000\034\005\116\006\120\007\114\010\123" +
    "\014\143\043\121\044\115\045\117\046\112\047\122\051" +
    "\111\052\125\053\124\001\002\000\070\002\uffd3\004\uffd3" +
    "\014\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\024" +
    "\144\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\055\uffd3\056\uffd3\057\uffd3\061\uffd3\063\uffd3\001\002" +
    "\000\066\002\uffd4\004\uffd4\014\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\022\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\055\uffd4\056\uffd4\057\uffd4\061\uffd4" +
    "\063\uffd4\001\002\000\046\005\uffac\006\uffac\007\uffac\010" +
    "\uffac\012\uffac\014\uffac\015\uffac\023\uffac\024\uffac\043\uffac" +
    "\044\uffac\045\uffac\046\uffac\047\uffac\051\111\052\125\053" +
    "\124\060\uffac\001\002\000\046\005\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\012\uffa9\014\uffa9\015\uffa9\023\uffa9\024\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\051\uffa9\052\uffa9" +
    "\053\124\060\uffa9\001\002\000\016\004\013\025\105\033" +
    "\106\034\041\035\074\036\107\001\002\000\046\005\116" +
    "\006\uffa6\007\114\010\123\012\uffa6\014\uffa6\015\uffa6\023" +
    "\uffa6\024\uffa6\043\121\044\115\045\117\046\112\047\122" +
    "\051\111\052\125\053\124\060\uffa6\001\002\000\004\015" +
    "\177\001\002\000\004\071\170\001\002\000\004\015\165" +
    "\001\002\000\036\005\116\006\120\007\114\010\123\015" +
    "\161\023\162\043\121\044\115\045\117\046\112\047\122" +
    "\051\111\052\125\053\124\001\002\000\004\015\156\001" +
    "\002\000\016\004\013\025\105\033\106\034\041\035\074" +
    "\036\107\001\002\000\034\005\116\006\120\007\114\010" +
    "\123\023\160\043\121\044\115\045\117\046\112\047\122" +
    "\051\111\052\125\053\124\001\002\000\066\002\uffca\004" +
    "\uffca\014\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\055\uffca\056\uffca\057\uffca\061\uffca\063\uffca\001\002\000" +
    "\016\004\013\025\105\033\106\034\041\035\074\036\107" +
    "\001\002\000\066\002\uffb5\004\uffb5\014\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\025\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\061\uffb5\063\uffb5\001\002\000\034\005\116\006\120\007" +
    "\114\010\123\023\164\043\121\044\115\045\117\046\112" +
    "\047\122\051\111\052\125\053\124\001\002\000\066\002" +
    "\uffb4\004\uffb4\014\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4" +
    "\041\uffb4\055\uffb4\056\uffb4\057\uffb4\061\uffb4\063\uffb4\001" +
    "\002\000\016\004\013\025\105\033\106\034\041\035\074" +
    "\036\107\001\002\000\034\005\116\006\120\007\114\010" +
    "\123\023\167\043\121\044\115\045\117\046\112\047\122" +
    "\051\111\052\125\053\124\001\002\000\066\002\uffc9\004" +
    "\uffc9\014\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\061\uffc9\063\uffc9\001\002\000" +
    "\004\015\171\001\002\000\004\013\172\001\002\000\062" +
    "\004\013\016\012\017\035\020\060\021\023\022\062\025" +
    "\020\026\022\027\017\030\011\031\031\032\071\033\053" +
    "\034\041\035\074\036\043\037\045\040\066\041\051\055" +
    "\054\056\015\057\047\061\063\063\076\001\002\000\064" +
    "\004\013\014\174\016\012\017\035\020\060\021\023\022" +
    "\062\025\020\026\022\027\017\030\011\031\031\032\071" +
    "\033\053\034\041\035\074\036\043\037\045\040\066\041" +
    "\051\055\054\056\015\057\047\061\063\063\076\001\002" +
    "\000\004\023\176\001\002\000\066\002\uffff\004\uffff\014" +
    "\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\025\uffff" +
    "\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034" +
    "\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\055\uffff" +
    "\056\uffff\057\uffff\061\uffff\063\uffff\001\002\000\066\002" +
    "\uffd2\004\uffd2\014\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\055\uffd2\056\uffd2\057\uffd2\061\uffd2\063\uffd2\001" +
    "\002\000\016\004\013\025\105\033\106\034\041\035\074" +
    "\036\107\001\002\000\034\005\116\006\120\007\114\010" +
    "\123\023\201\043\121\044\115\045\117\046\112\047\122" +
    "\051\111\052\125\053\124\001\002\000\066\002\uffcb\004" +
    "\uffcb\014\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\061\uffcb\063\uffcb\001\002\000" +
    "\066\002\uffd1\004\uffd1\014\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1" +
    "\040\uffd1\041\uffd1\055\uffd1\056\uffd1\057\uffd1\061\uffd1\063" +
    "\uffd1\001\002\000\016\004\013\025\105\033\106\034\041" +
    "\035\074\036\107\001\002\000\034\005\116\006\120\007" +
    "\114\010\123\012\205\043\121\044\115\045\117\046\112" +
    "\047\122\051\111\052\125\053\124\001\002\000\004\013" +
    "\206\001\002\000\062\004\013\016\012\017\035\020\060" +
    "\021\023\022\062\025\020\026\022\027\017\030\011\031" +
    "\031\032\071\033\053\034\041\035\074\036\043\037\045" +
    "\040\066\041\051\055\054\056\015\057\047\061\063\063" +
    "\076\001\002\000\064\004\013\014\210\016\012\017\035" +
    "\020\060\021\023\022\062\025\020\026\022\027\017\030" +
    "\011\031\031\032\071\033\053\034\041\035\074\036\043" +
    "\037\045\040\066\041\051\055\054\056\015\057\047\061" +
    "\063\063\076\001\002\000\066\002\uffc2\004\uffc2\014\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\025\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\061\uffc2\063\uffc2\001\002\000\004\011\212" +
    "\001\002\000\016\004\013\025\105\033\106\034\041\035" +
    "\074\036\107\001\002\000\034\005\116\006\120\007\114" +
    "\010\123\012\214\043\121\044\115\045\117\046\112\047" +
    "\122\051\111\052\125\053\124\001\002\000\004\013\215" +
    "\001\002\000\062\004\013\016\012\017\035\020\060\021" +
    "\023\022\062\025\020\026\022\027\017\030\011\031\031" +
    "\032\071\033\053\034\041\035\074\036\043\037\045\040" +
    "\066\041\051\055\054\056\015\057\047\061\063\063\076" +
    "\001\002\000\064\004\013\014\217\016\012\017\035\020" +
    "\060\021\023\022\062\025\020\026\022\027\017\030\011" +
    "\031\031\032\071\033\053\034\041\035\074\036\043\037" +
    "\045\040\066\041\051\055\054\056\015\057\047\061\063" +
    "\063\076\001\002\000\066\002\uffc0\004\uffc0\014\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\061\uffc0\063\uffc0\001\002\000\016\004\013\025" +
    "\105\033\106\034\041\035\074\036\107\001\002\000\034" +
    "\005\116\006\120\007\114\010\123\012\222\043\121\044" +
    "\115\045\117\046\112\047\122\051\111\052\125\053\124" +
    "\001\002\000\004\013\223\001\002\000\062\004\013\016" +
    "\012\017\035\020\060\021\023\022\062\025\020\026\022" +
    "\027\017\030\011\031\031\032\071\033\053\034\041\035" +
    "\074\036\043\037\045\040\066\041\051\055\054\056\015" +
    "\057\047\061\063\063\076\001\002\000\064\004\013\014" +
    "\225\016\012\017\035\020\060\021\023\022\062\025\020" +
    "\026\022\027\017\030\011\031\031\032\071\033\053\034" +
    "\041\035\074\036\043\037\045\040\066\041\051\055\054" +
    "\056\015\057\047\061\063\063\076\001\002\000\066\002" +
    "\uffce\004\uffce\014\uffce\016\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\055\uffce\056\uffce\057\uffce\061\uffce\063\uffce\001" +
    "\002\000\066\002\uffd6\004\uffd6\014\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\055\uffd6\056\uffd6\057\uffd6\061" +
    "\uffd6\063\uffd6\001\002\000\004\011\252\001\002\000\004" +
    "\011\245\001\002\000\004\011\240\001\002\000\004\011" +
    "\233\001\002\000\004\012\234\001\002\000\004\013\235" +
    "\001\002\000\062\004\013\016\012\017\035\020\060\021" +
    "\023\022\062\025\020\026\022\027\017\030\011\031\031" +
    "\032\071\033\053\034\041\035\074\036\043\037\045\040" +
    "\066\041\051\055\054\056\015\057\047\061\063\063\076" +
    "\001\002\000\064\004\013\014\237\016\012\017\035\020" +
    "\060\021\023\022\062\025\020\026\022\027\017\030\011" +
    "\031\031\032\071\033\053\034\041\035\074\036\043\037" +
    "\045\040\066\041\051\055\054\056\015\057\047\061\063" +
    "\063\076\001\002\000\066\002\uffc6\004\uffc6\014\uffc6\016" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\055\uffc6\056\uffc6" +
    "\057\uffc6\061\uffc6\063\uffc6\001\002\000\004\012\241\001" +
    "\002\000\004\013\242\001\002\000\062\004\013\016\012" +
    "\017\035\020\060\021\023\022\062\025\020\026\022\027" +
    "\017\030\011\031\031\032\071\033\053\034\041\035\074" +
    "\036\043\037\045\040\066\041\051\055\054\056\015\057" +
    "\047\061\063\063\076\001\002\000\064\004\013\014\244" +
    "\016\012\017\035\020\060\021\023\022\062\025\020\026" +
    "\022\027\017\030\011\031\031\032\071\033\053\034\041" +
    "\035\074\036\043\037\045\040\066\041\051\055\054\056" +
    "\015\057\047\061\063\063\076\001\002\000\066\002\uffc8" +
    "\004\uffc8\014\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\055\uffc8\056\uffc8\057\uffc8\061\uffc8\063\uffc8\001\002" +
    "\000\004\012\246\001\002\000\004\013\247\001\002\000" +
    "\062\004\013\016\012\017\035\020\060\021\023\022\062" +
    "\025\020\026\022\027\017\030\011\031\031\032\071\033" +
    "\053\034\041\035\074\036\043\037\045\040\066\041\051" +
    "\055\054\056\015\057\047\061\063\063\076\001\002\000" +
    "\064\004\013\014\251\016\012\017\035\020\060\021\023" +
    "\022\062\025\020\026\022\027\017\030\011\031\031\032" +
    "\071\033\053\034\041\035\074\036\043\037\045\040\066" +
    "\041\051\055\054\056\015\057\047\061\063\063\076\001" +
    "\002\000\066\002\uffcd\004\uffcd\014\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\055\uffcd\056\uffcd\057\uffcd\061" +
    "\uffcd\063\uffcd\001\002\000\004\012\253\001\002\000\004" +
    "\013\254\001\002\000\062\004\013\016\012\017\035\020" +
    "\060\021\023\022\062\025\020\026\022\027\017\030\011" +
    "\031\031\032\071\033\053\034\041\035\074\036\043\037" +
    "\045\040\066\041\051\055\054\056\015\057\047\061\063" +
    "\063\076\001\002\000\064\004\013\014\256\016\012\017" +
    "\035\020\060\021\023\022\062\025\020\026\022\027\017" +
    "\030\011\031\031\032\071\033\053\034\041\035\074\036" +
    "\043\037\045\040\066\041\051\055\054\056\015\057\047" +
    "\061\063\063\076\001\002\000\066\002\uffcc\004\uffcc\014" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\061\uffcc\063\uffcc\001\002\000\066\002" +
    "\uffd0\004\uffd0\014\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\055\uffd0\056\uffd0\057\uffd0\061\uffd0\063\uffd0\001" +
    "\002\000\016\004\013\025\105\033\106\034\041\035\074" +
    "\036\107\001\002\000\034\005\116\006\120\007\114\010" +
    "\123\023\262\043\121\044\115\045\117\046\112\047\122" +
    "\051\111\052\125\053\124\001\002\000\066\002\uffbd\004" +
    "\uffbd\014\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\061\uffbd\063\uffbd\001\002\000" +
    "\066\002\uffda\004\uffda\014\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\055\uffda\056\uffda\057\uffda\061\uffda\063" +
    "\uffda\001\002\000\016\004\013\025\105\033\106\034\041" +
    "\035\074\036\107\001\002\000\034\005\116\006\120\007" +
    "\114\010\123\012\266\043\121\044\115\045\117\046\112" +
    "\047\122\051\111\052\125\053\124\001\002\000\004\013" +
    "\267\001\002\000\062\004\013\016\012\017\035\020\060" +
    "\021\023\022\062\025\020\026\022\027\017\030\011\031" +
    "\031\032\071\033\053\034\041\035\074\036\043\037\045" +
    "\040\066\041\051\055\054\056\015\057\047\061\063\063" +
    "\076\001\002\000\064\004\013\014\271\016\012\017\035" +
    "\020\060\021\023\022\062\025\020\026\022\027\017\030" +
    "\011\031\031\032\071\033\053\034\041\035\074\036\043" +
    "\037\045\040\066\041\051\055\054\056\015\057\047\061" +
    "\063\063\076\001\002\000\066\002\uffc3\004\uffc3\014\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\055\uffc3\056" +
    "\uffc3\057\uffc3\061\uffc3\063\uffc3\001\002\000\036\005\116" +
    "\006\120\007\114\010\123\015\273\023\274\043\121\044" +
    "\115\045\117\046\112\047\122\051\111\052\125\053\124" +
    "\001\002\000\016\004\013\025\105\033\106\034\041\035" +
    "\074\036\107\001\002\000\066\002\uffb7\004\uffb7\014\uffb7" +
    "\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\061\uffb7\063\uffb7\001\002\000\034\005\116" +
    "\006\120\007\114\010\123\023\276\043\121\044\115\045" +
    "\117\046\112\047\122\051\111\052\125\053\124\001\002" +
    "\000\066\002\uffb6\004\uffb6\014\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\055\uffb6\056\uffb6\057\uffb6\061\uffb6" +
    "\063\uffb6\001\002\000\004\002\001\001\002\000\004\026" +
    "\301\001\002\000\012\004\304\015\303\025\302\026\305" +
    "\001\002\000\020\004\uff9a\015\uff9a\023\uff9a\025\uff9a\026" +
    "\uff9a\044\uff9a\046\uff9a\001\002\000\014\004\304\015\303" +
    "\025\302\026\305\050\327\001\002\000\020\004\uff9b\015" +
    "\uff9b\023\uff9b\025\uff9b\026\uff9b\044\uff9b\046\uff9b\001\002" +
    "\000\012\004\304\015\303\025\302\026\305\001\002\000" +
    "\016\004\304\015\303\025\302\026\305\044\310\046\307" +
    "\001\002\000\012\004\304\015\303\025\302\026\305\001" +
    "\002\000\012\004\304\015\303\025\302\026\305\001\002" +
    "\000\010\023\312\044\310\046\307\001\002\000\016\004" +
    "\013\025\105\033\106\034\041\035\074\036\107\001\002" +
    "\000\032\005\116\006\314\007\114\010\123\043\121\044" +
    "\115\045\117\046\112\047\122\051\111\052\125\053\124" +
    "\001\002\000\020\004\013\006\315\025\105\033\106\034" +
    "\041\035\074\036\107\001\002\000\004\012\316\001\002" +
    "\000\004\013\317\001\002\000\062\004\013\016\012\017" +
    "\035\020\060\021\023\022\062\025\020\026\022\027\017" +
    "\030\011\031\031\032\071\033\053\034\041\035\074\036" +
    "\043\037\045\040\066\041\051\055\054\056\015\057\047" +
    "\061\063\063\076\001\002\000\064\004\013\014\321\016" +
    "\012\017\035\020\060\021\023\022\062\025\020\026\022" +
    "\027\017\030\011\031\031\032\071\033\053\034\041\035" +
    "\074\036\043\037\045\040\066\041\051\055\054\056\015" +
    "\057\047\061\063\063\076\001\002\000\066\002\uff9f\004" +
    "\uff9f\014\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\055\uff9f\056\uff9f\057\uff9f\061\uff9f\063\uff9f\001\002\000" +
    "\020\004\uff99\015\uff99\023\uff99\025\uff99\026\uff99\044\uff99" +
    "\046\uff99\001\002\000\020\004\uff98\015\uff98\023\uff98\025" +
    "\uff98\026\uff98\044\uff98\046\uff98\001\002\000\010\015\325" +
    "\044\310\046\307\001\002\000\012\004\304\015\303\025" +
    "\302\026\305\001\002\000\020\004\uff9c\015\uff9c\023\uff9c" +
    "\025\uff9c\026\uff9c\044\310\046\307\001\002\000\004\023" +
    "\333\001\002\000\010\023\331\044\310\046\307\001\002" +
    "\000\012\004\304\015\303\025\302\026\305\001\002\000" +
    "\020\004\uff9d\015\uff9d\023\uff9d\025\uff9d\026\uff9d\044\310" +
    "\046\307\001\002\000\012\004\304\015\303\025\302\026" +
    "\305\001\002\000\020\004\uff9e\015\uff9e\023\uff9e\025\uff9e" +
    "\026\uff9e\044\310\046\307\001\002\000\036\005\116\006" +
    "\120\007\114\010\123\015\336\023\337\043\121\044\115" +
    "\045\117\046\112\047\122\051\111\052\125\053\124\001" +
    "\002\000\016\004\013\025\105\033\106\034\041\035\074" +
    "\036\107\001\002\000\066\002\uffbe\004\uffbe\014\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\061\uffbe\063\uffbe\001\002\000\034\005\116\006" +
    "\120\007\114\010\123\023\341\043\121\044\115\045\117" +
    "\046\112\047\122\051\111\052\125\053\124\001\002\000" +
    "\070\002\uffbc\004\uffbc\014\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\054\342\055\uffbc\056\uffbc\057\uffbc\061" +
    "\uffbc\063\uffbc\001\002\000\004\013\343\001\002\000\062" +
    "\004\013\016\012\017\035\020\060\021\023\022\062\025" +
    "\020\026\022\027\017\030\011\031\031\032\071\033\053" +
    "\034\041\035\074\036\043\037\045\040\066\041\051\055" +
    "\054\056\015\057\047\061\063\063\076\001\002\000\064" +
    "\004\013\014\345\016\012\017\035\020\060\021\023\022" +
    "\062\025\020\026\022\027\017\030\011\031\031\032\071" +
    "\033\053\034\041\035\074\036\043\037\045\040\066\041" +
    "\051\055\054\056\015\057\047\061\063\063\076\001\002" +
    "\000\004\022\346\001\002\000\004\011\347\001\002\000" +
    "\016\004\013\025\105\033\106\034\041\035\074\036\107" +
    "\001\002\000\034\005\116\006\120\007\114\010\123\012" +
    "\351\043\121\044\115\045\117\046\112\047\122\051\111" +
    "\052\125\053\124\001\002\000\004\023\352\001\002\000" +
    "\066\002\uffc1\004\uffc1\014\uffc1\016\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\055\uffc1\056\uffc1\057\uffc1\061\uffc1\063" +
    "\uffc1\001\002\000\066\002\uffd8\004\uffd8\014\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\055\uffd8\056\uffd8\057" +
    "\uffd8\061\uffd8\063\uffd8\001\002\000\004\075\373\001\002" +
    "\000\036\005\116\006\120\007\114\010\123\015\356\023" +
    "\357\043\121\044\115\045\117\046\112\047\122\051\111" +
    "\052\125\053\124\001\002\000\020\004\013\025\105\033" +
    "\106\034\041\035\074\036\107\063\360\001\002\000\066" +
    "\002\uffbb\004\uffbb\014\uffbb\016\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\022\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\055\uffbb\056\uffbb\057\uffbb\061\uffbb\063\uffbb" +
    "\001\002\000\004\013\363\001\002\000\034\005\116\006" +
    "\120\007\114\010\123\023\362\043\121\044\115\045\117" +
    "\046\112\047\122\051\111\052\125\053\124\001\002\000" +
    "\066\002\uffba\004\uffba\014\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\041\uffba\055\uffba\056\uffba\057\uffba\061\uffba\063" +
    "\uffba\001\002\000\004\064\364\001\002\000\004\024\365" +
    "\001\002\000\016\004\013\025\105\033\106\034\041\035" +
    "\074\036\107\001\002\000\034\005\116\006\120\007\114" +
    "\010\123\024\367\043\121\044\115\045\117\046\112\047" +
    "\122\051\111\052\125\053\124\001\002\000\016\004\013" +
    "\025\105\033\106\034\041\035\074\036\107\001\002\000" +
    "\034\005\116\006\120\007\114\010\123\014\371\043\121" +
    "\044\115\045\117\046\112\047\122\051\111\052\125\053" +
    "\124\001\002\000\004\023\372\001\002\000\066\002\uffc7" +
    "\004\uffc7\014\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\061\uffc7\063\uffc7\001\002" +
    "\000\004\015\374\001\002\000\004\013\375\001\002\000" +
    "\062\004\013\016\012\017\035\020\060\021\023\022\062" +
    "\025\020\026\022\027\017\030\011\031\031\032\071\033" +
    "\053\034\041\035\074\036\043\037\045\040\066\041\051" +
    "\055\054\056\015\057\047\061\063\063\076\001\002\000" +
    "\064\004\013\014\377\016\012\017\035\020\060\021\023" +
    "\022\062\025\020\026\022\027\017\030\011\031\031\032" +
    "\071\033\053\034\041\035\074\036\043\037\045\040\066" +
    "\041\051\055\054\056\015\057\047\061\063\063\076\001" +
    "\002\000\004\023\u0100\001\002\000\066\002\uffdb\004\uffdb" +
    "\014\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\055" +
    "\uffdb\056\uffdb\057\uffdb\061\uffdb\063\uffdb\001\002\000\034" +
    "\005\116\006\120\007\114\010\123\043\121\044\115\045" +
    "\117\046\112\047\122\051\111\052\125\053\124\060\u0102" +
    "\001\002\000\066\002\uffcf\004\uffcf\014\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\055\uffcf\056\uffcf\057\uffcf" +
    "\061\uffcf\063\uffcf\001\002\000\016\004\013\025\105\033" +
    "\106\034\041\035\074\036\107\001\002\000\034\005\116" +
    "\006\120\007\114\010\123\012\u0105\043\121\044\115\045" +
    "\117\046\112\047\122\051\111\052\125\053\124\001\002" +
    "\000\004\023\u0106\001\002\000\066\002\uffbf\004\uffbf\014" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\055\uffbf" +
    "\056\uffbf\057\uffbf\061\uffbf\063\uffbf\001\002\000\036\005" +
    "\116\006\120\007\114\010\123\015\u0108\023\u0109\043\121" +
    "\044\115\045\117\046\112\047\122\051\111\052\125\053" +
    "\124\001\002\000\016\004\013\025\105\033\106\034\041" +
    "\035\074\036\107\001\002\000\066\002\uffb9\004\uffb9\014" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\061\uffb9\063\uffb9\001\002\000\034\005" +
    "\116\006\120\007\114\010\123\023\u010b\043\121\044\115" +
    "\045\117\046\112\047\122\051\111\052\125\053\124\001" +
    "\002\000\066\002\uffb8\004\uffb8\014\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\055\uffb8\056\uffb8\057\uffb8\061" +
    "\uffb8\063\uffb8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\116\002\024\003\027\004\035\005\045\007" +
    "\067\010\054\011\031\012\060\013\055\014\013\015\015" +
    "\016\033\017\064\020\036\021\100\022\007\023\047\024" +
    "\063\025\026\026\041\027\032\030\074\031\077\032\056" +
    "\033\071\034\020\035\051\036\043\037\076\040\005\041" +
    "\004\042\025\043\006\044\066\045\037\046\023\047\072" +
    "\050\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u0106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\u0100\001\001\000\002\001\001" +
    "\000\004\005\354\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\334\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\112\004\174\005\045\007\067\010\054\011\031" +
    "\012\060\013\055\014\013\015\015\016\033\017\064\020" +
    "\036\021\100\022\007\023\047\024\063\025\026\026\041" +
    "\027\032\030\074\031\077\032\056\033\071\034\020\035" +
    "\051\036\043\037\076\040\005\041\004\042\025\043\006" +
    "\044\066\045\037\046\023\047\072\050\003\001\001\000" +
    "\004\005\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\145\001\001\000\004\005\144\001" +
    "\001\000\004\005\141\001\001\000\004\005\140\001\001" +
    "\000\004\005\137\001\001\000\004\005\136\001\001\000" +
    "\004\005\135\001\001\000\004\005\134\001\001\000\004" +
    "\005\133\001\001\000\004\005\132\001\001\000\004\005" +
    "\131\001\001\000\004\005\127\001\001\000\004\005\125" +
    "\001\001\000\002\001\001\000\004\005\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\114\003\172\004\035\005\045\007\067\010\054\011" +
    "\031\012\060\013\055\014\013\015\015\016\033\017\064" +
    "\020\036\021\100\022\007\023\047\024\063\025\026\026" +
    "\041\027\032\030\074\031\077\032\056\033\071\034\020" +
    "\035\051\036\043\037\076\040\005\041\004\042\025\043" +
    "\006\044\066\045\037\046\023\047\072\050\003\001\001" +
    "\000\112\004\174\005\045\007\067\010\054\011\031\012" +
    "\060\013\055\014\013\015\015\016\033\017\064\020\036" +
    "\021\100\022\007\023\047\024\063\025\026\026\041\027" +
    "\032\030\074\031\077\032\056\033\071\034\020\035\051" +
    "\036\043\037\076\040\005\041\004\042\025\043\006\044" +
    "\066\045\037\046\023\047\072\050\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\114\003\206\004\035\005\045\007\067" +
    "\010\054\011\031\012\060\013\055\014\013\015\015\016" +
    "\033\017\064\020\036\021\100\022\007\023\047\024\063" +
    "\025\026\026\041\027\032\030\074\031\077\032\056\033" +
    "\071\034\020\035\051\036\043\037\076\040\005\041\004" +
    "\042\025\043\006\044\066\045\037\046\023\047\072\050" +
    "\003\001\001\000\112\004\174\005\045\007\067\010\054" +
    "\011\031\012\060\013\055\014\013\015\015\016\033\017" +
    "\064\020\036\021\100\022\007\023\047\024\063\025\026" +
    "\026\041\027\032\030\074\031\077\032\056\033\071\034" +
    "\020\035\051\036\043\037\076\040\005\041\004\042\025" +
    "\043\006\044\066\045\037\046\023\047\072\050\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\114\003" +
    "\215\004\035\005\045\007\067\010\054\011\031\012\060" +
    "\013\055\014\013\015\015\016\033\017\064\020\036\021" +
    "\100\022\007\023\047\024\063\025\026\026\041\027\032" +
    "\030\074\031\077\032\056\033\071\034\020\035\051\036" +
    "\043\037\076\040\005\041\004\042\025\043\006\044\066" +
    "\045\037\046\023\047\072\050\003\001\001\000\112\004" +
    "\174\005\045\007\067\010\054\011\031\012\060\013\055" +
    "\014\013\015\015\016\033\017\064\020\036\021\100\022" +
    "\007\023\047\024\063\025\026\026\041\027\032\030\074" +
    "\031\077\032\056\033\071\034\020\035\051\036\043\037" +
    "\076\040\005\041\004\042\025\043\006\044\066\045\037" +
    "\046\023\047\072\050\003\001\001\000\002\001\001\000" +
    "\004\005\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\114\003\223\004\035\005\045\007\067\010\054\011" +
    "\031\012\060\013\055\014\013\015\015\016\033\017\064" +
    "\020\036\021\100\022\007\023\047\024\063\025\026\026" +
    "\041\027\032\030\074\031\077\032\056\033\071\034\020" +
    "\035\051\036\043\037\076\040\005\041\004\042\025\043" +
    "\006\044\066\045\037\046\023\047\072\050\003\001\001" +
    "\000\112\004\174\005\045\007\067\010\054\011\031\012" +
    "\060\013\055\014\013\015\015\016\033\017\064\020\036" +
    "\021\100\022\007\023\047\024\063\025\026\026\041\027" +
    "\032\030\074\031\077\032\056\033\071\034\020\035\051" +
    "\036\043\037\076\040\005\041\004\042\025\043\006\044" +
    "\066\045\037\046\023\047\072\050\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\114\003\235\004\035\005\045\007" +
    "\067\010\054\011\031\012\060\013\055\014\013\015\015" +
    "\016\033\017\064\020\036\021\100\022\007\023\047\024" +
    "\063\025\026\026\041\027\032\030\074\031\077\032\056" +
    "\033\071\034\020\035\051\036\043\037\076\040\005\041" +
    "\004\042\025\043\006\044\066\045\037\046\023\047\072" +
    "\050\003\001\001\000\112\004\174\005\045\007\067\010" +
    "\054\011\031\012\060\013\055\014\013\015\015\016\033" +
    "\017\064\020\036\021\100\022\007\023\047\024\063\025" +
    "\026\026\041\027\032\030\074\031\077\032\056\033\071" +
    "\034\020\035\051\036\043\037\076\040\005\041\004\042" +
    "\025\043\006\044\066\045\037\046\023\047\072\050\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\114\003\242\004\035\005\045\007\067\010\054" +
    "\011\031\012\060\013\055\014\013\015\015\016\033\017" +
    "\064\020\036\021\100\022\007\023\047\024\063\025\026" +
    "\026\041\027\032\030\074\031\077\032\056\033\071\034" +
    "\020\035\051\036\043\037\076\040\005\041\004\042\025" +
    "\043\006\044\066\045\037\046\023\047\072\050\003\001" +
    "\001\000\112\004\174\005\045\007\067\010\054\011\031" +
    "\012\060\013\055\014\013\015\015\016\033\017\064\020" +
    "\036\021\100\022\007\023\047\024\063\025\026\026\041" +
    "\027\032\030\074\031\077\032\056\033\071\034\020\035" +
    "\051\036\043\037\076\040\005\041\004\042\025\043\006" +
    "\044\066\045\037\046\023\047\072\050\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\114" +
    "\003\247\004\035\005\045\007\067\010\054\011\031\012" +
    "\060\013\055\014\013\015\015\016\033\017\064\020\036" +
    "\021\100\022\007\023\047\024\063\025\026\026\041\027" +
    "\032\030\074\031\077\032\056\033\071\034\020\035\051" +
    "\036\043\037\076\040\005\041\004\042\025\043\006\044" +
    "\066\045\037\046\023\047\072\050\003\001\001\000\112" +
    "\004\174\005\045\007\067\010\054\011\031\012\060\013" +
    "\055\014\013\015\015\016\033\017\064\020\036\021\100" +
    "\022\007\023\047\024\063\025\026\026\041\027\032\030" +
    "\074\031\077\032\056\033\071\034\020\035\051\036\043" +
    "\037\076\040\005\041\004\042\025\043\006\044\066\045" +
    "\037\046\023\047\072\050\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\114\003\254\004" +
    "\035\005\045\007\067\010\054\011\031\012\060\013\055" +
    "\014\013\015\015\016\033\017\064\020\036\021\100\022" +
    "\007\023\047\024\063\025\026\026\041\027\032\030\074" +
    "\031\077\032\056\033\071\034\020\035\051\036\043\037" +
    "\076\040\005\041\004\042\025\043\006\044\066\045\037" +
    "\046\023\047\072\050\003\001\001\000\112\004\174\005" +
    "\045\007\067\010\054\011\031\012\060\013\055\014\013" +
    "\015\015\016\033\017\064\020\036\021\100\022\007\023" +
    "\047\024\063\025\026\026\041\027\032\030\074\031\077" +
    "\032\056\033\071\034\020\035\051\036\043\037\076\040" +
    "\005\041\004\042\025\043\006\044\066\045\037\046\023" +
    "\047\072\050\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\114\003\267\004\035" +
    "\005\045\007\067\010\054\011\031\012\060\013\055\014" +
    "\013\015\015\016\033\017\064\020\036\021\100\022\007" +
    "\023\047\024\063\025\026\026\041\027\032\030\074\031" +
    "\077\032\056\033\071\034\020\035\051\036\043\037\076" +
    "\040\005\041\004\042\025\043\006\044\066\045\037\046" +
    "\023\047\072\050\003\001\001\000\112\004\174\005\045" +
    "\007\067\010\054\011\031\012\060\013\055\014\013\015" +
    "\015\016\033\017\064\020\036\021\100\022\007\023\047" +
    "\024\063\025\026\026\041\027\032\030\074\031\077\032" +
    "\056\033\071\034\020\035\051\036\043\037\076\040\005" +
    "\041\004\042\025\043\006\044\066\045\037\046\023\047" +
    "\072\050\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\305\001\001\000\002\001\001\000\004\006" +
    "\327\001\001\000\002\001\001\000\004\006\323\001\001" +
    "\000\004\006\310\001\001\000\004\006\322\001\001\000" +
    "\004\006\321\001\001\000\002\001\001\000\004\005\312" +
    "\001\001\000\002\001\001\000\004\005\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\114\003\317\004\035" +
    "\005\045\007\067\010\054\011\031\012\060\013\055\014" +
    "\013\015\015\016\033\017\064\020\036\021\100\022\007" +
    "\023\047\024\063\025\026\026\041\027\032\030\074\031" +
    "\077\032\056\033\071\034\020\035\051\036\043\037\076" +
    "\040\005\041\004\042\025\043\006\044\066\045\037\046" +
    "\023\047\072\050\003\001\001\000\112\004\174\005\045" +
    "\007\067\010\054\011\031\012\060\013\055\014\013\015" +
    "\015\016\033\017\064\020\036\021\100\022\007\023\047" +
    "\024\063\025\026\026\041\027\032\030\074\031\077\032" +
    "\056\033\071\034\020\035\051\036\043\037\076\040\005" +
    "\041\004\042\025\043\006\044\066\045\037\046\023\047" +
    "\072\050\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\331\001\001\000\002\001\001\000\004\006" +
    "\333\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\337\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\114\003\343\004\035" +
    "\005\045\007\067\010\054\011\031\012\060\013\055\014" +
    "\013\015\015\016\033\017\064\020\036\021\100\022\007" +
    "\023\047\024\063\025\026\026\041\027\032\030\074\031" +
    "\077\032\056\033\071\034\020\035\051\036\043\037\076" +
    "\040\005\041\004\042\025\043\006\044\066\045\037\046" +
    "\023\047\072\050\003\001\001\000\112\004\174\005\045" +
    "\007\067\010\054\011\031\012\060\013\055\014\013\015" +
    "\015\016\033\017\064\020\036\021\100\022\007\023\047" +
    "\024\063\025\026\026\041\027\032\030\074\031\077\032" +
    "\056\033\071\034\020\035\051\036\043\037\076\040\005" +
    "\041\004\042\025\043\006\044\066\045\037\046\023\047" +
    "\072\050\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\347\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\360\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\365\001" +
    "\001\000\002\001\001\000\004\005\367\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\114\003\375\004\035\005\045" +
    "\007\067\010\054\011\031\012\060\013\055\014\013\015" +
    "\015\016\033\017\064\020\036\021\100\022\007\023\047" +
    "\024\063\025\026\026\041\027\032\030\074\031\077\032" +
    "\056\033\071\034\020\035\051\036\043\037\076\040\005" +
    "\041\004\042\025\043\006\044\066\045\037\046\023\047" +
    "\072\050\003\001\001\000\112\004\174\005\045\007\067" +
    "\010\054\011\031\012\060\013\055\014\013\015\015\016" +
    "\033\017\064\020\036\021\100\022\007\023\047\024\063" +
    "\025\026\026\041\027\032\030\074\031\077\032\056\033" +
    "\071\034\020\035\051\036\043\037\076\040\005\041\004" +
    "\042\025\043\006\044\066\045\037\046\023\047\072\050" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u0103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
        TError nuevoError = new TError("Error Sintactico", s.value.toString(),s.right,s.left);
        Principal.Lista_Errores.add(nuevoError);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
        TError nuevoError = new TError("Error Sintactico", s.value.toString(),s.right,s.left);
        Principal.Lista_Errores.add(nuevoError);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= lista_instr 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList lista = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 func.Funcion.traduccion = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instr ::= lista_instr instruccion 
            {
              LinkedList RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList lista = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            lista.addAll((LinkedList) val);
            RESULT = (LinkedList) lista;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instr ::= instruccion 
            {
              LinkedList RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            LinkedList<String> lista = new LinkedList<>();
            lista.addAll((LinkedList) val);
            RESULT = (LinkedList) lista;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= instr_mostrar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= if 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= declara 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= declaraig 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= declaradou 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= declaraigdou 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= declaracha 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= declaraigcha 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= declarabol 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= declaraigbol 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= declaracade 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= declaraigcade 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= comentarios 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= comentariosl 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= maind 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= else 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= while 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= for 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= declararfas 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= do 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= funcion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= declaraigdounew 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= grafibarras 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= stringb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= ejex 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= stringtitux 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= stringtituy 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= grafipie 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= switch 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= case 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= break 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= default 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= expres 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= valores 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valores ::= DOUBLE CORCHETE VALORES IGUAL LLAVE_A lista_instr LLAVE_C PUNTOYCOMA 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("double [] Valores = {"); 
                lista.addAll(inst);
                Graficar.valoress.addAll(inst);
                lista.add("};\n"); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expres ::= CADENA COMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(val.toString()+", "); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expres",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expres ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(val.toString()+" "); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expres",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expres ::= IDENTI COMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(val.toString()+", "); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expres",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expres ::= IDENTI 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(val.toString()+" "); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expres",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expres ::= DOUBLEN COMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(val.toString()+", "); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expres",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expres ::= DOUBLEN 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(val.toString()+" "); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expres",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expres ::= DOLAR LLAVE_A NEWVALOR COMA expresion COMA expresion LLAVE_C COMA 
            {
              Object RESULT =null;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object cade = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cadesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cadesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object cades = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("${NewValor, "+cade+", "+cades+" },"); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expres",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expres ::= DOLAR LLAVE_A NEWVALOR COMA expresion COMA expresion LLAVE_C 
            {
              Object RESULT =null;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object cade = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cadesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cadesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cades = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("${NewValor, "+cade+", "+cades+" }"); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expres",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ejex ::= STRING CORCHETE EJEX IGUAL LLAVE_A lista_instr LLAVE_C PUNTOYCOMA 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("String [] ejex = {"); 
                lista.addAll(inst); 
                lista.add("};\n");
                Graficar.ejexs.addAll(inst);
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejex",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // default ::= DEFAULT DOSPUNTOS 
            {
              Object RESULT =null;
		
        LinkedList<String> lista = new LinkedList<>();
        lista.add(" :");

        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // break ::= BREAK PUNTOYCOMA 
            {
              Object RESULT =null;
		
        LinkedList<String> lista = new LinkedList<>();
        lista.add("\n");

        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // case ::= CASE expresion DOSPUNTOS 
            {
              Object RESULT =null;
		int cadesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cadesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cades = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        LinkedList<String> lista = new LinkedList<>();
        lista.add(cades+ " :");

        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // switch ::= SWITCH PARENTESIS_A expresion PARENTESIS_C LLAVE_A lista_instr LLAVE_C 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        LinkedList<String> lista = new LinkedList<>();
        lista.add("def switch (case, "+ exp + "):\n");
        lista.add("switcher = {\n");

        func.Funcion.contador++;
        lista.addAll(func.Funcion.tabulaciones(inst));
        func.Funcion.contador--;
        
        lista.add("}\n");

        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // grafibarras ::= VOID GRAFIB PARENTESIS_A PARENTESIS_C LLAVE_A lista_instr LLAVE_C 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    LinkedList<String> lista = new LinkedList<>();
    lista.add("void GraficaBarras(){\n");
    lista.addAll(inst);
    lista.add("\n");
    lista.add("}\n");
    func.Funcion.funciones.addAll(inst);
    RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafibarras",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // grafipie ::= VOID GRAFIP PARENTESIS_A PARENTESIS_C LLAVE_A lista_instr LLAVE_C 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    LinkedList<String> lista = new LinkedList<>();
    lista.add("void GraficaPie(){\n");
    lista.addAll(inst);
    lista.add("\n");
    lista.add("}\n");
    func.Funcion.funciones.addAll(inst);
    RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafipie",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stringb ::= STRING TITULO IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int cadesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cadesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cades = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("string titulo = "+cades.toString()+";\n");
                Graficar.Titulo = cades.toString();
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringb",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stringtitux ::= STRING TITULOX IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int cadesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cadesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cades = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("string titulox = "+cades.toString()+";\n"); 
                Graficar.TituloX = cades.toString();
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringtitux",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stringtituy ::= STRING TITULOY IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int cadesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cadesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cades = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("string tituloy = "+cades.toString()+";\n");
                Graficar.TituloY = cades.toString();
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringtituy",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // funcion ::= VOID DEFIGLO PARENTESIS_A PARENTESIS_C LLAVE_A lista_instr LLAVE_C 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    LinkedList<String> lista = new LinkedList<>();
    lista.add("void DefinirGlobales(){\n");
    lista.addAll(inst);
    lista.add("\n");
    lista.add("}\n");
    func.Funcion.funciones.addAll(inst);
    func.Graficar.funciones.addAll(inst); 
    RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaraigdounew ::= DOUBLE expresion IGUAL DOLAR LLAVE_A NEWVALOR COMA expresion COMA expresion LLAVE_C PUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object cade = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cadesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cadesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object cades = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("double "+val.toString()+" = ${ NewValor, "+cade.toString()+","+cades.toString()+" };\n"); 
                Graficar instancia = new Graficar();
                instancia.AgregarDo(val.toString(),"${ NewValor, "+cade.toString()+","+cades.toString()+" }");
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraigdounew",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // maind ::= VOID MAIN PARENTESIS_A PARENTESIS_C LLAVE_A lista_instr LLAVE_C 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        LinkedList<String> lista = new LinkedList<>();
        lista.add("def main():\n");

        func.Funcion.contador++;
        lista.addAll(func.Funcion.tabulaciones(inst));
        func.Funcion.contador--;

        lista.add("if__name__ = \"__main__\":\n");
        lista.add("\tmain()\n");

        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("maind",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comentarios ::= COMENMULTILI 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("comentario multilenea: "+val+"\n"); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comentarios",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comentariosl ::= COMENLI 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("comentario una linea: "+val+"\n"); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comentariosl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if ::= IF PARENTESIS_A expresion PARENTESIS_C LLAVE_A lista_instr LLAVE_C 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        LinkedList<String> lista = new LinkedList<>();
        lista.add("if "+ exp + ":\n");

        func.Funcion.contador++;
        lista.addAll(func.Funcion.tabulaciones(inst));
        func.Funcion.contador--;

        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // while ::= WHILE PARENTESIS_A expresion PARENTESIS_C LLAVE_A lista_instr LLAVE_C 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        LinkedList<String> lista = new LinkedList<>();
        lista.add("while "+ exp + ":\n");

        func.Funcion.contador++;
        lista.addAll(func.Funcion.tabulaciones(inst));
        func.Funcion.contador--;

        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // do ::= INT expresion IGUAL expresion PUNTOYCOMA DO LLAVE_A lista_instr LLAVE_C WHILE PARENTESIS_A expresion PARENTESIS_C PUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        LinkedList<String> lista = new LinkedList<>();
        lista.add(val+" = "+ ent + "\n");
        lista.add("while True:\n");

        LinkedList<String> listas = new LinkedList<>();
        listas.add(val+" = "+val+"+1\n");
        listas.add("if ("+exp+"):\n");
        listas.add("\tbreak\n");

        func.Funcion.contador++;
        lista.addAll(func.Funcion.tabulaciones(inst));
        lista.addAll(func.Funcion.tabulaciones(listas));
        func.Funcion.contador--;

        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // else ::= ELSE IF PARENTESIS_A expresion PARENTESIS_C LLAVE_A lista_instr LLAVE_C 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        LinkedList<String> lista = new LinkedList<>();
        lista.add("elif "+ exp + ":\n");

        func.Funcion.contador++;
        lista.addAll(func.Funcion.tabulaciones(inst));
        func.Funcion.contador--;

        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instr_mostrar ::= MOSTRAR PARENTESIS_A expresion PARENTESIS_C PUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("print("+val+")\n"); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_mostrar",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declara ::= INT expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("var "+val+"\n"); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declararfas ::= expresion IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(exp+"="+val+"\n"); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararfas",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaraig ::= INT expresion IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(exp+"="+val+"\n"); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraig",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaradou ::= DOUBLE expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("var "+val+"\n"); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaradou",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaraigdou ::= DOUBLE expresion IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(exp+"="+val+"\n"); 
                Graficar instancia = new Graficar();
                instancia.AgregarD(exp.toString(),val.toString());
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraigdou",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracha ::= CHAR expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("var "+val+"\n"); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracha",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaraigcha ::= CHAR expresion IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(exp+"="+val+"\n"); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraigcha",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declarabol ::= BOOL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("var "+val+"\n"); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarabol",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaraigbol ::= BOOL expresion IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(exp+"="+val+"\n"); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraigbol",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracade ::= STRING expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("var "+val+"\n"); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracade",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaraigcade ::= STRING expresion IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add(exp+"="+val+"\n"); 
                Graficar instancia = new Graficar();
                instancia.AgregarS(exp.toString(),val.toString());
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraigcade",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" * "+b.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" + "+b.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" - "+b.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion DIVISION expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" / "+b.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" > "+b.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= expresion MENOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" < "+b.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" >= "+b.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= expresion MENORIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" <= "+b.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= expresion IGUALIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" == "+b.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= expresion NOT IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" != "+b.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" and "+b.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" or "+b.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= expresion NOT expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" not "+b.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= CADENA MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+","+b.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= IDENTI 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= DOUBLEN 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= TRUE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= FALSE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // for ::= FOR PARENTESIS_A INT expresionf expresionf PUNTOYCOMA expresion MAS MAS PARENTESIS_C LLAVE_A lista_instr LLAVE_C 
            {
              Object RESULT =null;
		int exzleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int exzright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object exz = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        LinkedList<String> lista = new LinkedList<>();
        lista.add("for "+exz+" in range("+ exp +"):\n");

        func.Funcion.contador++;
        lista.addAll(func.Funcion.tabulaciones(inst));
        func.Funcion.contador--;

        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresionf ::= IGUAL CERO PUNTOYCOMA expresionf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = 1+","+b.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionf",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresionf ::= IGUAL expresionf PUNTOYCOMA expresionf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+","+b.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionf",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresionf ::= INT expresionf IGUAL expresionf 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionf",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresionf ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionf",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionf ::= IDENTI 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionf",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresionf ::= expresionf MENOR expresionf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionf",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresionf ::= expresionf MENORIGUAL expresionf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionf",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
